From f116dfe4ff6f1e3531958564aeeebd2ff4e22b7f Mon Sep 17 00:00:00 2001
From: James Jackson <superjax08@gmail.com>
Date: Sun, 24 Jan 2021 21:38:20 -0800
Subject: [PATCH] fix clang compile warnings

---
 Eigen/Dense                       |  6 ++++
 Eigen/Geometry                    |  8 ++++-
 Eigen/LU                          |  5 ++++
 unsupported/Eigen/MatrixFunctions | 50 +++++++++++++++++--------------
 4 files changed, 45 insertions(+), 24 deletions(-)

diff --git a/Eigen/Dense b/Eigen/Dense
index 5768910bd..21999f743 100644
--- a/Eigen/Dense
+++ b/Eigen/Dense
@@ -1,3 +1,7 @@
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wcast-qual"
+#pragma clang diagnostic ignored "-Wshadow"
+
 #include "Core"
 #include "LU"
 #include "Cholesky"
@@ -5,3 +9,5 @@
 #include "SVD"
 #include "Geometry"
 #include "Eigenvalues"
+
+#pragma clang diagnostic pop
diff --git a/Eigen/Geometry b/Eigen/Geometry
index 716d52952..bad426826 100644
--- a/Eigen/Geometry
+++ b/Eigen/Geometry
@@ -8,6 +8,11 @@
 #ifndef EIGEN_GEOMETRY_MODULE_H
 #define EIGEN_GEOMETRY_MODULE_H
 
+
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wcast-qual"
+#pragma clang diagnostic ignored "-Wshadow"
+
 #include "Core"
 
 #include "src/Core/util/DisableStupidWarnings.h"
@@ -57,6 +62,7 @@
 
 #include "src/Core/util/ReenableStupidWarnings.h"
 
+#pragma clang diagnostic pop
+
 #endif // EIGEN_GEOMETRY_MODULE_H
 /* vim: set filetype=cpp et sw=2 ts=2 ai: */
-
diff --git a/Eigen/LU b/Eigen/LU
index 6418a86e1..a268ce18f 100644
--- a/Eigen/LU
+++ b/Eigen/LU
@@ -8,6 +8,9 @@
 #ifndef EIGEN_LU_MODULE_H
 #define EIGEN_LU_MODULE_H
 
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wcast-qual"
+
 #include "Core"
 
 #include "src/Core/util/DisableStupidWarnings.h"
@@ -46,5 +49,7 @@
 
 #include "src/Core/util/ReenableStupidWarnings.h"
 
+#pragma clang diagnostic pop
+
 #endif // EIGEN_LU_MODULE_H
 /* vim: set filetype=cpp et sw=2 ts=2 ai: */
diff --git a/unsupported/Eigen/MatrixFunctions b/unsupported/Eigen/MatrixFunctions
index 60dc0a69b..871e16c41 100644
--- a/unsupported/Eigen/MatrixFunctions
+++ b/unsupported/Eigen/MatrixFunctions
@@ -11,6 +11,9 @@
 #ifndef EIGEN_MATRIX_FUNCTIONS
 #define EIGEN_MATRIX_FUNCTIONS
 
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wcast-qual"
+
 #include <cfloat>
 #include <list>
 
@@ -21,9 +24,9 @@
 /**
   * \defgroup MatrixFunctions_Module Matrix functions module
   * \brief This module aims to provide various methods for the computation of
-  * matrix functions. 
+  * matrix functions.
   *
-  * To use this module, add 
+  * To use this module, add
   * \code
   * #include <unsupported/Eigen/MatrixFunctions>
   * \endcode
@@ -40,7 +43,7 @@
   *  - \ref matrixbase_sinh "MatrixBase::sinh()", for computing the matrix hyperbolic sine
   *  - \ref matrixbase_sqrt "MatrixBase::sqrt()", for computing the matrix square root
   *
-  * These methods are the main entry points to this module. 
+  * These methods are the main entry points to this module.
   *
   * %Matrix functions are defined as follows.  Suppose that \f$ f \f$
   * is an entire function (that is, a function on the complex plane
@@ -60,7 +63,7 @@
 #include "src/MatrixFunctions/MatrixPower.h"
 
 
-/** 
+/**
 \page matrixbaseextra_page
 \ingroup MatrixFunctions_Module
 
@@ -176,7 +179,7 @@ const MatrixLogarithmReturnValue<Derived> MatrixBase<Derived>::log() const
 \param[in]  M  invertible matrix whose logarithm is to be computed.
 \returns    expression representing the matrix logarithm root of \p M.
 
-The matrix logarithm of \f$ M \f$ is a matrix \f$ X \f$ such that 
+The matrix logarithm of \f$ M \f$ is a matrix \f$ X \f$ such that
 \f$ \exp(X) = M \f$ where exp denotes the matrix exponential. As for
 the scalar logarithm, the equation \f$ \exp(X) = M \f$ may have
 multiple solutions; this function returns a matrix whose eigenvalues
@@ -203,14 +206,14 @@ Nicholas J. Higham,
 SIAM 2008. ISBN 978-0-898716-46-7.
 
 Example: The following program checks that
-\f[ \log \left[ \begin{array}{ccc} 
+\f[ \log \left[ \begin{array}{ccc}
       \frac12\sqrt2 & -\frac12\sqrt2 & 0 \\
       \frac12\sqrt2 & \frac12\sqrt2 & 0 \\
       0 & 0 & 1
     \end{array} \right] = \left[ \begin{array}{ccc}
-      0 & \frac14\pi & 0 \\ 
+      0 & \frac14\pi & 0 \\
       -\frac14\pi & 0 & 0 \\
-      0 & 0 & 0 
+      0 & 0 & 0
     \end{array} \right]. \f]
 This corresponds to a rotation of \f$ \frac14\pi \f$ radians around
 the z-axis. This is the inverse of the example used in the
@@ -222,7 +225,7 @@ Output: \verbinclude MatrixLogarithm.out
 \note \p M has to be a matrix of \c float, \c double, `long
 double`, \c complex<float>, \c complex<double>, or `complex<long double>`.
 
-\sa MatrixBase::exp(), MatrixBase::matrixFunction(), 
+\sa MatrixBase::exp(), MatrixBase::matrixFunction(),
     class MatrixLogarithmAtomic, MatrixBase::sqrt().
 
 
@@ -284,7 +287,7 @@ int main()
        0, 0, 6, 7,
        0, 0, 8, 9;
   std::cout << A.pow(0.37) << std::endl;
-  
+
   // The 1 makes eigenvalue 0 non-semisimple.
   A.coeffRef(0, 1) = 1;
 
@@ -345,10 +348,10 @@ const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::matrixFunction(typ
 derivative of f at x.
 \returns  expression representing \p f applied to \p M.
 
-Suppose that \p M is a matrix whose entries have type \c Scalar. 
+Suppose that \p M is a matrix whose entries have type \c Scalar.
 Then, the second argument, \p f, should be a function with prototype
-\code 
-ComplexScalar f(ComplexScalar, int) 
+\code
+ComplexScalar f(ComplexScalar, int)
 \endcode
 where \c ComplexScalar = \c std::complex<Scalar> if \c Scalar is
 real (e.g., \c float or \c double) and \c ComplexScalar =
@@ -356,17 +359,17 @@ real (e.g., \c float or \c double) and \c ComplexScalar =
 should be \f$ f^{(n)}(x) \f$, the n-th derivative of f at x.
 
 This routine uses the algorithm described in:
-Philip Davies and Nicholas J. Higham, 
-"A Schur-Parlett algorithm for computing matrix functions", 
+Philip Davies and Nicholas J. Higham,
+"A Schur-Parlett algorithm for computing matrix functions",
 <em>SIAM J. %Matrix Anal. Applic.</em>, <b>25</b>:464&ndash;485, 2003.
 
 The actual work is done by the MatrixFunction class.
 
 Example: The following program checks that
-\f[ \exp \left[ \begin{array}{ccc} 
-      0 & \frac14\pi & 0 \\ 
+\f[ \exp \left[ \begin{array}{ccc}
+      0 & \frac14\pi & 0 \\
       -\frac14\pi & 0 & 0 \\
-      0 & 0 & 0 
+      0 & 0 & 0
     \end{array} \right] = \left[ \begin{array}{ccc}
       \frac12\sqrt2 & -\frac12\sqrt2 & 0 \\
       \frac12\sqrt2 & \frac12\sqrt2 & 0 \\
@@ -379,7 +382,7 @@ of \ref matrixbase_exp "exp()".
 \include MatrixFunction.cpp
 Output: \verbinclude MatrixFunction.out
 
-Note that the function \c expfn is defined for complex numbers 
+Note that the function \c expfn is defined for complex numbers
 \c x, even though the matrix \c A is over the reals. Instead of
 \c expfn, we could also have used StdStemFunctions::exp:
 \code
@@ -446,7 +449,7 @@ In the <b>real case</b>, the matrix \f$ M \f$ should be invertible and
 it should have no eigenvalues which are real and negative (pairs of
 complex conjugate eigenvalues are allowed). In that case, the matrix
 has a square root which is also real, and this is the square root
-computed by this function. 
+computed by this function.
 
 The matrix square root is computed by first reducing the matrix to
 quasi-triangular form with the real Schur decomposition. The square
@@ -478,12 +481,12 @@ square root of a matrix", <em>Linear Algebra Appl.</em>,
 52/53:127&ndash;140, 1983.
 
 Example: The following program checks that the square root of
-\f[ \left[ \begin{array}{cc} 
+\f[ \left[ \begin{array}{cc}
               \cos(\frac13\pi) & -\sin(\frac13\pi) \\
               \sin(\frac13\pi) & \cos(\frac13\pi)
     \end{array} \right], \f]
 corresponding to a rotation over 60 degrees, is a rotation over 30 degrees:
-\f[ \left[ \begin{array}{cc} 
+\f[ \left[ \begin{array}{cc}
               \cos(\frac16\pi) & -\sin(\frac16\pi) \\
               \sin(\frac16\pi) & \cos(\frac16\pi)
     \end{array} \right]. \f]
@@ -496,5 +499,6 @@ Output: \verbinclude MatrixSquareRoot.out
 
 */
 
-#endif // EIGEN_MATRIX_FUNCTIONS
+#pragma clang diagnostic pop
 
+#endif // EIGEN_MATRIX_FUNCTIONS
-- 
2.25.1

